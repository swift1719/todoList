{"version":3,"sources":["components/display.js","components/addTask.js","components/navbar.js","components/functional.js","App.js","serviceWorker.js","index.js"],"names":["Display","todoList","taskDone","list","length","map","todo","id","name","complete","className","style","backgroundColor","listStyle","padding","key","onClick","textDecoration","marginTop","AddTask","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","addtask","onSubmit","this","type","placeholder","onChange","React","Component","Nav","Functionalities","filter","task","App","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab4cd611.chunk.js","sourcesContent":["import React from 'react';\r\nconst Display = ({ todoList, taskDone }) => {\r\n\tconst list = todoList.length ? (\r\n\t\ttodoList.map((todo) => {\r\n\t\t\tconst { id, name, complete } = todo;\r\n\t\t\treturn (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\" alert alert-info  rounded-pill\"\r\n\t\t\t\t\tstyle={{ backgroundColor: '#28B9B5', listStyle: 'none', padding: '0px 0px' }}\r\n\t\t\t\t\tkey={id}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\ttaskDone(id);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<h3 style={{ textDecoration: complete ? 'line-through' : '' }}>{name}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t})\r\n\t) : (\r\n\t\t<p className=\"container\">Add first task</p>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"d-flex flex-row justify-content-center\" style={{ marginTop: '110px' }}>\r\n\t\t\t\t<div className=\"col-sm-8\">{list}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Display;\r\n","import React from 'react';\r\n\r\nclass AddTask extends React.Component {\r\n\tstate = {\r\n\t\tname: '',\r\n\t\tcomplete: false\r\n\t};\r\n\thandleChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id]: event.target.value\r\n\t\t});\r\n\t};\r\n\thandleSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tthis.props.addtask(this.state);\r\n\t\tthis.setState({\r\n\t\t\tname: '',\r\n\t\t\tcomplete: false\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container \">\r\n\t\t\t\t<div className=\"d-flex flex-row justify-content-center\">\r\n\t\t\t\t\t<div className=\"col-sm-6 \">\r\n\t\t\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t\t<div className=\"form-group \">\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\t\t\t\t\tclassName=\" form-control border border-primary rounded\"\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Add a Task \"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.name}\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default AddTask;\r\n","import React from 'react';\r\nconst Nav = () => {\r\n\treturn (\r\n\t\t<nav className=\"navbar navbar-expand-lg navbar-dark fixed-top \" style={{ backgroundColor: '#2c3e50' }}>\r\n\t\t\t<div className=\"container justify-content-center\">\r\n\t\t\t\t<div className=\"d-flex flex-row \">\r\n\t\t\t\t\t<div className=\"col-sm-12 text-white\">\r\n\t\t\t\t\t\t<h1>Todo-List</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t);\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nconst Functionalities = ({ todoList }) => {\r\n\treturn (\r\n\t\t<div className=\"container \" style={{ marginTop: '20px', padding: '0px 0px' }}>\r\n\t\t\t<div className=\"d-flex flex-row justify-content-end\">\r\n\t\t\t\t<div className=\"col-sm-3 \">\r\n\t\t\t\t\t<div className=\" alert alert-warning border border-danger\">\r\n\t\t\t\t\t\t<h4 className=\"rounded-pill\">\r\n\t\t\t\t\t\t\tTasks to be done : {todoList.filter((task) => !task.complete).length}\r\n\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Functionalities;\r\n","import React from 'react';\nimport './App.css';\nimport Display from './components/display';\nimport AddTask from './components/addTask';\nimport Nav from './components/navbar';\nimport Fuctionalities from './components/functional';\nclass App extends React.Component {\n\tstate = {\n\t\ttodoList: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'Broadband Recharge',\n\t\t\t\tcomplete: false\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'Electricity Bill',\n\t\t\t\tcomplete: false\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'Assignments',\n\t\t\t\tcomplete: false\n\t\t\t}\n\t\t]\n\t};\n\taddtask = (task) => {\n\t\ttask.id = 5 + Math.floor(Math.random() * 1000);\n\t\tthis.setState({\n\t\t\ttodoList: [ ...this.state.todoList, task ]\n\t\t});\n\t};\n\ttaskDone = (id) => {\n\t\tthis.setState({\n\t\t\ttodoList: this.state.todoList.map((task) => {\n\t\t\t\tif (task.id === id) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...task,\n\t\t\t\t\t\tcomplete: !task.complete\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn task;\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App \">\n\t\t\t\t<Nav />\n\t\t\t\t<Display todoList={this.state.todoList} taskDone={this.taskDone} />\n\t\t\t\t<Fuctionalities todoList={this.state.todoList} />\n\t\t\t\t<AddTask addtask={this.addtask} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}